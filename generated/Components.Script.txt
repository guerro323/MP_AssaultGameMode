// This script was automatically generated

#Include "Libs/ECS/EntityManager.Script.txt" as EntityManager
#Include "Libs/Nerpson/MsUnit.Script.txt" as MsUnit
#Include "Modes/ShootMania/Assault/components/ACurrentSpawn.Script.txt" as Lib_ACurrentSpawn
#Include "Modes/ShootMania/Assault/components/AGameSettings.Script.txt" as Lib_AGameSettings
#Include "Modes/ShootMania/Assault/components/AKit.Script.txt" as Lib_AKit
#Include "Modes/ShootMania/Assault/components/ALandmark.Script.txt" as Lib_ALandmark
#Include "Modes/ShootMania/Assault/components/AMatch.Script.txt" as Lib_AMatch
#Include "Modes/ShootMania/Assault/components/APlayer.Script.txt" as Lib_APlayer
#Include "Modes/ShootMania/Assault/components/ARound.Script.txt" as Lib_ARound
#Include "Modes/ShootMania/Assault/components/ATeam.Script.txt" as Lib_ATeam
#Include "Modes/ShootMania/Assault/components/AWinEvent.Script.txt" as Lib_AWinEvent

#Struct Lib_ACurrentSpawn::ACurrentSpawn as ACurrentSpawn
#Struct Lib_AGameSettings::AGameSettings as AGameSettings
#Struct Lib_AKit::AKit as AKit
#Struct Lib_ALandmark::ALandmark as ALandmark
#Struct Lib_AMatch::AMatch as AMatch
#Struct Lib_APlayer::APlayer as APlayer
#Struct Lib_ARound::ARound as ARound
#Struct Lib_ATeam::ATeam as ATeam
#Struct Lib_AWinEvent::AWinEvent as AWinEvent
#Struct EntityManager::SEntity as SEntity
// Struct Header generation...
#Struct QueryResult_AGameSettings{
	// This was autogenerated.
AGameSettings _AGameSettings;
}#Struct QueryResult_AMatch{
	// This was autogenerated.
AMatch _AMatch;
}#Struct QueryResult_AWinEvent{
	// This was autogenerated.
AWinEvent _AWinEvent;
}#Struct QueryResult_AKit{
	// This was autogenerated.
AKit _AKit;
}#Struct QueryResult_APlayer{
	// This was autogenerated.
APlayer _APlayer;
}#Struct QueryResult_APlayer_ATeam{
	// This was autogenerated.
APlayer _APlayer;
ATeam _ATeam;
}#Struct QueryResult_ALandmark{
	// This was autogenerated.
ALandmark _ALandmark;
}#Struct QueryResult_ALandmark_ACurrentSpawn{
	// This was autogenerated.
ALandmark _ALandmark;
ACurrentSpawn _ACurrentSpawn;
}#Struct QueryResult_ACurrentSpawn{
	// This was autogenerated.
ACurrentSpawn _ACurrentSpawn;
}#Struct QueryResult_ARound{
	// This was autogenerated.
ARound _ARound;
}
/// --------------- --------------- --------------- --------------- ///
/// ACurrentSpawn
/// --------------- --------------- --------------- --------------- ///

declare ACurrentSpawn[Integer] G_ComponentsACurrentSpawn;


ACurrentSpawn Get(Integer _Index, ACurrentSpawn _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsACurrentSpawn[_Index];
}

ACurrentSpawn Get(SEntity _Entity, ACurrentSpawn _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, ACurrentSpawn _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsACurrentSpawn[_Index] = _Value;
}

Void Set(SEntity _Entity, ACurrentSpawn _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, ACurrentSpawn _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsACurrentSpawn.existskey(_Index);
}

Boolean Has(SEntity _Entity, ACurrentSpawn _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, ACurrentSpawn _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsACurrentSpawn.removekey(_Index);
}

Boolean Remove(SEntity _Entity, ACurrentSpawn _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// AGameSettings
/// --------------- --------------- --------------- --------------- ///

declare AGameSettings[Integer] G_ComponentsAGameSettings;


AGameSettings Get(Integer _Index, AGameSettings _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAGameSettings[_Index];
}

AGameSettings Get(SEntity _Entity, AGameSettings _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, AGameSettings _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsAGameSettings[_Index] = _Value;
}

Void Set(SEntity _Entity, AGameSettings _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, AGameSettings _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAGameSettings.existskey(_Index);
}

Boolean Has(SEntity _Entity, AGameSettings _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, AGameSettings _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAGameSettings.removekey(_Index);
}

Boolean Remove(SEntity _Entity, AGameSettings _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// AKit
/// --------------- --------------- --------------- --------------- ///

declare AKit[Integer] G_ComponentsAKit;


AKit Get(Integer _Index, AKit _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAKit[_Index];
}

AKit Get(SEntity _Entity, AKit _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, AKit _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsAKit[_Index] = _Value;
}

Void Set(SEntity _Entity, AKit _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, AKit _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAKit.existskey(_Index);
}

Boolean Has(SEntity _Entity, AKit _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, AKit _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAKit.removekey(_Index);
}

Boolean Remove(SEntity _Entity, AKit _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// ALandmark
/// --------------- --------------- --------------- --------------- ///

declare ALandmark[Integer] G_ComponentsALandmark;


ALandmark Get(Integer _Index, ALandmark _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsALandmark[_Index];
}

ALandmark Get(SEntity _Entity, ALandmark _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, ALandmark _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsALandmark[_Index] = _Value;
}

Void Set(SEntity _Entity, ALandmark _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, ALandmark _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsALandmark.existskey(_Index);
}

Boolean Has(SEntity _Entity, ALandmark _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, ALandmark _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsALandmark.removekey(_Index);
}

Boolean Remove(SEntity _Entity, ALandmark _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// AMatch
/// --------------- --------------- --------------- --------------- ///

declare AMatch[Integer] G_ComponentsAMatch;


AMatch Get(Integer _Index, AMatch _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAMatch[_Index];
}

AMatch Get(SEntity _Entity, AMatch _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, AMatch _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsAMatch[_Index] = _Value;
}

Void Set(SEntity _Entity, AMatch _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, AMatch _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAMatch.existskey(_Index);
}

Boolean Has(SEntity _Entity, AMatch _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, AMatch _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAMatch.removekey(_Index);
}

Boolean Remove(SEntity _Entity, AMatch _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// APlayer
/// --------------- --------------- --------------- --------------- ///

declare APlayer[Integer] G_ComponentsAPlayer;


APlayer Get(Integer _Index, APlayer _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAPlayer[_Index];
}

APlayer Get(SEntity _Entity, APlayer _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, APlayer _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsAPlayer[_Index] = _Value;
}

Void Set(SEntity _Entity, APlayer _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, APlayer _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAPlayer.existskey(_Index);
}

Boolean Has(SEntity _Entity, APlayer _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, APlayer _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAPlayer.removekey(_Index);
}

Boolean Remove(SEntity _Entity, APlayer _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// ARound
/// --------------- --------------- --------------- --------------- ///

declare ARound[Integer] G_ComponentsARound;


ARound Get(Integer _Index, ARound _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsARound[_Index];
}

ARound Get(SEntity _Entity, ARound _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, ARound _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsARound[_Index] = _Value;
}

Void Set(SEntity _Entity, ARound _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, ARound _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsARound.existskey(_Index);
}

Boolean Has(SEntity _Entity, ARound _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, ARound _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsARound.removekey(_Index);
}

Boolean Remove(SEntity _Entity, ARound _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// ATeam
/// --------------- --------------- --------------- --------------- ///

declare ATeam[Integer] G_ComponentsATeam;


ATeam Get(Integer _Index, ATeam _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsATeam[_Index];
}

ATeam Get(SEntity _Entity, ATeam _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, ATeam _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsATeam[_Index] = _Value;
}

Void Set(SEntity _Entity, ATeam _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, ATeam _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsATeam.existskey(_Index);
}

Boolean Has(SEntity _Entity, ATeam _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, ATeam _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsATeam.removekey(_Index);
}

Boolean Remove(SEntity _Entity, ATeam _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
/// --------------- --------------- --------------- --------------- ///
/// AWinEvent
/// --------------- --------------- --------------- --------------- ///

declare AWinEvent[Integer] G_ComponentsAWinEvent;


AWinEvent Get(Integer _Index, AWinEvent _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAWinEvent[_Index];
}

AWinEvent Get(SEntity _Entity, AWinEvent _Empty)
{
    return Get(_Entity.Index, _Empty);
}

Void Set(Integer _Index, AWinEvent _Value)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    G_ComponentsAWinEvent[_Index] = _Value;
}

Void Set(SEntity _Entity, AWinEvent _Value)
{
    Set(_Entity.Index, _Value);
}

Boolean Has(Integer _Index, AWinEvent _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAWinEvent.existskey(_Index);
}

Boolean Has(SEntity _Entity, AWinEvent _Empty)
{
    return Has(_Entity.Index, _Empty);
}

Boolean Remove(Integer _Index, AWinEvent _Empty)
{
    MsUnit::AssertTrue(EntityManager::Exists(_Index), "EntityManager::Exists(" ^ _Index ^ ")");

    return G_ComponentsAWinEvent.removekey(_Index);
}

Boolean Remove(SEntity _Entity, AWinEvent _Empty)
{
    return Remove(_Entity.Index, _Empty);
}
// Bottom generation...
declare QueryResult_AGameSettings[] Cached_QueryResult_AGameSettings;
declare SEntity[] Cached_Entities_QueryResult_AGameSettings;
SEntity[] GetAllEntities(AGameSettings _0)
{
	Cached_Entities_QueryResult_AGameSettings.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, AGameSettings {}))
		{
			Cached_Entities_QueryResult_AGameSettings.add(entity);
		}
	}

	return Cached_Entities_QueryResult_AGameSettings;
}
QueryResult_AGameSettings[] GetAllData(AGameSettings _0)
{
	Cached_QueryResult_AGameSettings.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_AGameSettings {};
		if (Has(entity, AGameSettings {})) queryResult._AGameSettings = Get(entity, AGameSettings {}); else continue;
		

		Cached_QueryResult_AGameSettings.add(queryResult);
	}

	return Cached_QueryResult_AGameSettings;
}
declare QueryResult_AMatch[] Cached_QueryResult_AMatch;
declare SEntity[] Cached_Entities_QueryResult_AMatch;
SEntity[] GetAllEntities(AMatch _0)
{
	Cached_Entities_QueryResult_AMatch.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, AMatch {}))
		{
			Cached_Entities_QueryResult_AMatch.add(entity);
		}
	}

	return Cached_Entities_QueryResult_AMatch;
}
QueryResult_AMatch[] GetAllData(AMatch _0)
{
	Cached_QueryResult_AMatch.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_AMatch {};
		if (Has(entity, AMatch {})) queryResult._AMatch = Get(entity, AMatch {}); else continue;
		

		Cached_QueryResult_AMatch.add(queryResult);
	}

	return Cached_QueryResult_AMatch;
}
declare QueryResult_AWinEvent[] Cached_QueryResult_AWinEvent;
declare SEntity[] Cached_Entities_QueryResult_AWinEvent;
SEntity[] GetAllEntities(AWinEvent _0)
{
	Cached_Entities_QueryResult_AWinEvent.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, AWinEvent {}))
		{
			Cached_Entities_QueryResult_AWinEvent.add(entity);
		}
	}

	return Cached_Entities_QueryResult_AWinEvent;
}
QueryResult_AWinEvent[] GetAllData(AWinEvent _0)
{
	Cached_QueryResult_AWinEvent.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_AWinEvent {};
		if (Has(entity, AWinEvent {})) queryResult._AWinEvent = Get(entity, AWinEvent {}); else continue;
		

		Cached_QueryResult_AWinEvent.add(queryResult);
	}

	return Cached_QueryResult_AWinEvent;
}
declare QueryResult_AKit[] Cached_QueryResult_AKit;
declare SEntity[] Cached_Entities_QueryResult_AKit;
SEntity[] GetAllEntities(AKit _0)
{
	Cached_Entities_QueryResult_AKit.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, AKit {}))
		{
			Cached_Entities_QueryResult_AKit.add(entity);
		}
	}

	return Cached_Entities_QueryResult_AKit;
}
QueryResult_AKit[] GetAllData(AKit _0)
{
	Cached_QueryResult_AKit.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_AKit {};
		if (Has(entity, AKit {})) queryResult._AKit = Get(entity, AKit {}); else continue;
		

		Cached_QueryResult_AKit.add(queryResult);
	}

	return Cached_QueryResult_AKit;
}
declare QueryResult_APlayer[] Cached_QueryResult_APlayer;
declare SEntity[] Cached_Entities_QueryResult_APlayer;
SEntity[] GetAllEntities(APlayer _0)
{
	Cached_Entities_QueryResult_APlayer.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, APlayer {}))
		{
			Cached_Entities_QueryResult_APlayer.add(entity);
		}
	}

	return Cached_Entities_QueryResult_APlayer;
}
QueryResult_APlayer[] GetAllData(APlayer _0)
{
	Cached_QueryResult_APlayer.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_APlayer {};
		if (Has(entity, APlayer {})) queryResult._APlayer = Get(entity, APlayer {}); else continue;
		

		Cached_QueryResult_APlayer.add(queryResult);
	}

	return Cached_QueryResult_APlayer;
}
declare QueryResult_APlayer_ATeam[] Cached_QueryResult_APlayer_ATeam;
declare SEntity[] Cached_Entities_QueryResult_APlayer_ATeam;
SEntity[] GetAllEntities(APlayer _0, ATeam _1)
{
	Cached_Entities_QueryResult_APlayer_ATeam.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, APlayer {})&& Has(entity, ATeam {}))
		{
			Cached_Entities_QueryResult_APlayer_ATeam.add(entity);
		}
	}

	return Cached_Entities_QueryResult_APlayer_ATeam;
}
QueryResult_APlayer_ATeam[] GetAllData(APlayer _0, ATeam _1)
{
	Cached_QueryResult_APlayer_ATeam.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_APlayer_ATeam {};
		if (Has(entity, APlayer {})) queryResult._APlayer = Get(entity, APlayer {}); else continue;
		if (Has(entity, ATeam {})) queryResult._ATeam = Get(entity, ATeam {}); else continue;
		

		Cached_QueryResult_APlayer_ATeam.add(queryResult);
	}

	return Cached_QueryResult_APlayer_ATeam;
}
declare QueryResult_ALandmark[] Cached_QueryResult_ALandmark;
declare SEntity[] Cached_Entities_QueryResult_ALandmark;
SEntity[] GetAllEntities(ALandmark _0)
{
	Cached_Entities_QueryResult_ALandmark.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, ALandmark {}))
		{
			Cached_Entities_QueryResult_ALandmark.add(entity);
		}
	}

	return Cached_Entities_QueryResult_ALandmark;
}
QueryResult_ALandmark[] GetAllData(ALandmark _0)
{
	Cached_QueryResult_ALandmark.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_ALandmark {};
		if (Has(entity, ALandmark {})) queryResult._ALandmark = Get(entity, ALandmark {}); else continue;
		

		Cached_QueryResult_ALandmark.add(queryResult);
	}

	return Cached_QueryResult_ALandmark;
}
declare QueryResult_ALandmark_ACurrentSpawn[] Cached_QueryResult_ALandmark_ACurrentSpawn;
declare SEntity[] Cached_Entities_QueryResult_ALandmark_ACurrentSpawn;
SEntity[] GetAllEntities(ALandmark _0, ACurrentSpawn _1)
{
	Cached_Entities_QueryResult_ALandmark_ACurrentSpawn.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, ALandmark {})&& Has(entity, ACurrentSpawn {}))
		{
			Cached_Entities_QueryResult_ALandmark_ACurrentSpawn.add(entity);
		}
	}

	return Cached_Entities_QueryResult_ALandmark_ACurrentSpawn;
}
QueryResult_ALandmark_ACurrentSpawn[] GetAllData(ALandmark _0, ACurrentSpawn _1)
{
	Cached_QueryResult_ALandmark_ACurrentSpawn.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_ALandmark_ACurrentSpawn {};
		if (Has(entity, ALandmark {})) queryResult._ALandmark = Get(entity, ALandmark {}); else continue;
		if (Has(entity, ACurrentSpawn {})) queryResult._ACurrentSpawn = Get(entity, ACurrentSpawn {}); else continue;
		

		Cached_QueryResult_ALandmark_ACurrentSpawn.add(queryResult);
	}

	return Cached_QueryResult_ALandmark_ACurrentSpawn;
}
declare QueryResult_ACurrentSpawn[] Cached_QueryResult_ACurrentSpawn;
declare SEntity[] Cached_Entities_QueryResult_ACurrentSpawn;
SEntity[] GetAllEntities(ACurrentSpawn _0)
{
	Cached_Entities_QueryResult_ACurrentSpawn.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, ACurrentSpawn {}))
		{
			Cached_Entities_QueryResult_ACurrentSpawn.add(entity);
		}
	}

	return Cached_Entities_QueryResult_ACurrentSpawn;
}
QueryResult_ACurrentSpawn[] GetAllData(ACurrentSpawn _0)
{
	Cached_QueryResult_ACurrentSpawn.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_ACurrentSpawn {};
		if (Has(entity, ACurrentSpawn {})) queryResult._ACurrentSpawn = Get(entity, ACurrentSpawn {}); else continue;
		

		Cached_QueryResult_ACurrentSpawn.add(queryResult);
	}

	return Cached_QueryResult_ACurrentSpawn;
}
declare QueryResult_ARound[] Cached_QueryResult_ARound;
declare SEntity[] Cached_Entities_QueryResult_ARound;
SEntity[] GetAllEntities(ARound _0)
{
	Cached_Entities_QueryResult_ARound.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		if (True && Has(entity, ARound {}))
		{
			Cached_Entities_QueryResult_ARound.add(entity);
		}
	}

	return Cached_Entities_QueryResult_ARound;
}
QueryResult_ARound[] GetAllData(ARound _0)
{
	Cached_QueryResult_ARound.clear();

	declare entities = EntityManager::GetEntities();
	foreach (entity in entities)
	{
		declare queryResult = QueryResult_ARound {};
		if (Has(entity, ARound {})) queryResult._ARound = Get(entity, ARound {}); else continue;
		

		Cached_QueryResult_ARound.add(queryResult);
	}

	return Cached_QueryResult_ARound;
}

