//nogenerate

/*
 *	Mode Assault
 */

#Extends "Modes/ShootMania/Base/ModeShootmania.Script.txt"

#Include "Libs/Stormium/Interface.Script.txt" as StormiumIT

#Include "Modes/ShootMania/Assault/generated/Components.Script.txt" as Components
#Include "Libs/ECS/EntityManager.Script.txt" as EntityManager
#Include "Modes/ShootMania/Assault/GameSystem.Script.txt" as GameSystem
#Include "Modes/ShootMania/Assault/CharacterSystem.Script.txt" as CharacterSystem
#Include "Modes/ShootMania/Assault/LandmarkSystem.Script.txt" as LandmarkSystem
#Include "Modes/ShootMania/Assault/CaptureSystem.Script.txt" as CaptureSystem

#Include "Modes/ShootMania/Assault/components/APlayer.Script.txt" as Lib_APlayer
#Include "Modes/ShootMania/Assault/components/AKit.Script.txt" as Lib_AKit
#Include "Modes/ShootMania/Assault/components/ATeam.Script.txt" as Lib_ATeam
#Include "Modes/ShootMania/Assault/components/AGameSettings.Script.txt" as Lib_AGameSettings

#Setting S_TimeLimit 260 as _("Time limit.")
#Setting S_TimeToCap 80 as _("Time to capture.")
#Setting S_OpenGateTime 20 as _("Time to open the gates.")
#Setting S_CaptureGainTime 180 as _("Time to gain after a capture.")

#Setting S_HudModulePath "Nadeo/ShootMania/SiegeV1/Hud.Module.Gbx" as "<hidden>"

#Struct Lib_APlayer::APlayer as APlayer
#Struct Lib_AKit::AKit as AKit
#Struct Lib_ATeam::ATeam as ATeam
#Struct Lib_AGameSettings::AGameSettings as AGameSettings
#Struct EntityManager::SEntity as SEntity

#Const CompatibleMapTypes "AgeArena"
#Const Version				"2019-04-14"
#Const ScriptName			"Assault.Script.txt"

#Const CC """ halign="center" valign="center" """
#Const LC """ halign="left" valign="center" """
#Const RC """ halign="right" valign="center" """

***Match_Settings***
***
	MB_Settings_UseDefaultTimer = False;
	MB_Settings_UseDefaultClansScoresUI = False;
***

***Match_StartServer***
***
	UseBeaconsWithRecipients = True;
	UsePlayerTagging = True;

	Message::CleanAllMessages();
	
	UIManager.UIAll.BigMessage = "";

	log("Assault Server Started!");
	
	foreach (Player in AllPlayers)
	{
		declare SEntity entityTarget for Player.User;
		
		entityTarget = SEntity {};
	}
	
	declare gameEntity = EntityManager::CreateEntity();
	
	Components::Set(gameEntity, AGameSettings
	{
		TimeLimit = S_TimeLimit,
		TimeToCap = S_TimeToCap,
		OpenGateTime = S_OpenGateTime,
		CaptureGainTime = S_CaptureGainTime,
		
		MaxRounds = 2
	});
	
	ItemList_Begin();
	CreateKits();
	ItemList_End();
	
	Users_SetNbFakeUsers(0, 0);
	
	Layers::Create("KitInterface", GetKitInterface());
	CaptureSystem::Create();
	
	UIManager.UIAll.TeamLabelsVisibility = CUIConfig::ELabelsVisibility::Always; 
	UIManager.UIAll.TeamLabelsShowGauges = CUIConfig::EVisibility::ForcedVisible;
	UIManager.UIAll.OpposingTeamLabelsVisibility = CUIConfig::ELabelsVisibility::WhenVisible;
	UIManager.UIAll.OpposingTeamLabelsShowGauges = CUIConfig::EVisibility::Manual;
	
	StormiumIT::Load(StormiumIT::C_ModeChampions);
	StormiumIT::ShowCustomCoutdown(True);
	StormiumIT::ShowCustomScores(True);
	StormiumIT::ShowCustomMarkers(True);
	StormiumIT::SetActive(True);
	
	Hud_Load(S_HudModulePath);
	//Hud_Load("AssaultHUD.Module.Gbx");
	if (Hud != Null && Hud.ScoresTable != Null) {
	  Hud.ScoresTable.Scores_Sort(CModulePlaygroundScoresTable::EScoreSortOrder::SMPoints);
	}
***

***Match_StartMap***
***
	TurretsManager.MapTurrets_Reset();
	DestroyAllBotPlayers();
	
	LandmarkSystem::NewLandmarks();
	
	log("Map Started!");
	
	UseClans = True;
	
	GameSystem::NewMap();
***

***Match_StartRound***
***
	GameSystem::NewRound();
	LandmarkSystem::OnNewRound();
	
	UIManager.UIAll.BigMessage = "";
	
	MB_EnablePlayMode(True);
***

***Match_Yield***
***
	declare i = 0;
	
	Layers::Attach("KitInterface");
	
	StormiumIT::Loop();
	CaptureSystem::Yield();
***

***Match_PlayLoop***
***
	ManagePlayerData();
	
	GameSystem::Update();
	LandmarkSystem::Update();
	CharacterSystem::Update();
	CaptureSystem::Update();
	
	if (GameSystem::ShouldEndRound())
	{
		MB_StopRound();
	}
***	

***Match_EndRound***
***
	SM::UnspawnAllPlayers();
	MB_EnablePlayMode(False);
	
	GameSystem::EndRound();
	
	MB_Sleep(5000);
	
	if (GameSystem::ShouldEndMatch())
	{
		MB_StopMap();
	}
***

***Match_EndMap***
***
	log("Assault End map.");
***

ATeam GetTeam(CSmPlayer Player)
{
	if (Player.CurrentClan == 0)
		return ATeam {Value = Player.User.RequestedClan};

	declare blueCount = 0;
	declare redCount = 0;
	foreach (Data in Components::GetAllData(/* ignore */ APlayer {}, ATeam {}))
	{
		if (Data._ATeam.Value == 1) blueCount += 1;
		else redCount += 1;
	} 
	
	if (blueCount > redCount)
		return ATeam {Value = 2};

	return ATeam {Value = 1};
}

Void ManagePlayerData()
{
	foreach (Player in Players)
	{
		declare SEntity entityTarget for Player.User;
		
		if (EntityManager::Exists(entityTarget))
			continue;
			
		entityTarget = EntityManager::CreateEntity();
		
		Components::Set(entityTarget, Lib_APlayer::constructor(Player));
		Components::Set(entityTarget, GetTeam(Player));
		log("Created Player entity " ^ entityTarget.Index);
	}
	
	// Destroy entities that don't have a player anymore
	foreach (Entity in Components::GetAllEntities(APlayer {}))
	{
		declare playerData = Components::Get(Entity, APlayer {});
		if (playerData.Character != NullId && Players.existskey(playerData.Character))
			continue;
			
		EntityManager::DestroyEntity(Entity); 
		log("Destroyed Player entity " ^ Entity.Index);
	}
}

Void CreateKits()
{
	declare SEntity Entity;

	// -------------------------- //
	// TANKS
	// -------------------------- //
	// Jolt
	Entity = EntityManager::CreateEntity();
	
	Components::Set(Entity, AKit
	{
		Weapon = ::EWeapon::Nucleus,
		AmmoGain = 0.5,
		AmmoMax = 1,
		
		ArmorMax = 300,
		
		SpeedCoeff = 0.875,
		
		SkinId = ItemList_Add ("AssaultJolt.Item.gbx")
	});
	
	// Hammer
	Entity = EntityManager::CreateEntity();
	
	Components::Set(Entity, AKit
	{
		Weapon = ::EWeapon::Missile,
		AmmoGain = 0.725,
		AmmoMax = 6,
		CanReloadFaster = True,
		FastAmmoGain = 2.5,
		
		ArmorMax = 400,
		
		SpeedCoeff = 0.9,
		
		SkinId = ItemList_Add ("TeamlordStruct.Item.gbx")
	});
	
	// -------------------------- //
	// Dps
	// -------------------------- //
	// Blade
	Entity = EntityManager::CreateEntity();
	
	Components::Set(Entity, AKit
	{
		Weapon = ::EWeapon::Rocket,
		AmmoGain = 1.2,
		AmmoMax = 4,
		
		ArmorMax = 200,
		
		SpeedCoeff = 1.0,
		
		LifeStealPower = 0,
		
		SkinId = ItemList_Add ("AssaultBlade.Item.gbx")
	});
	
	// Blast
	Entity = EntityManager::CreateEntity();
	
	Components::Set(Entity, AKit
	{
		Weapon = ::EWeapon::Arrow,
		AmmoGain = 0.45,
		AmmoMax = 1,
		
		ArmorMax = 200,
		
		SpeedCoeff = 1.0,
		
		SkinId = ItemList_Add ("AssaultBlast.Item.gbx")
	});
	
	// -------------------------- //
	// Support
	// -------------------------- //
	// Nail
	Entity = EntityManager::CreateEntity();
	
	Components::Set(Entity, AKit
	{
		Weapon = ::EWeapon::Laser,
		AmmoGain = 0.85,
		AmmoMax = 1,
		
		ArmorMax = 200,
		
		SpeedCoeff = 1.0,
		
		SkinId = ItemList_Add ("Sniper.Item.gbx")
	});
	
	// Cell
	Entity = EntityManager::CreateEntity();
	
	Components::Set(Entity, AKit
	{
		Weapon = ::EWeapon::Rocket,
		CanHeal = True,
		AmmoGain = 0.9,
		AmmoMax = 2,
		
		ArmorMax = 200,
		ArmorReplenishGain = 85,
		
		SpeedCoeff = 1.0,
		
		SkinId = ItemList_Add ("AssaultCell.Item.gbx")
	});
}

Text GetKitInterface()
{
	declare txt = """<manialink version="3">
	
<frame id="Description" pos="0 -25.5">	
	<label {{{LC}}} pos="-40 7.5" textprefix="" textcolor="fff" textfont="RajdhaniMono"/>
	<label {{{LC}}} pos="-40 0" textprefix="" textcolor="fff" textfont="RajdhaniMono"/>
	<label {{{LC}}} pos="-40 -7.5" textprefix="" textcolor="fff" textfont="RajdhaniMono"/>
	
	<label {{{RC}}} pos="40 7.5" id="DescType" text="TANK " textcolor="fff" textsize="3" textfont="Oswald" opacity="0.75"/>
	
	
	<label {{{LC}}} pos="-32 7.5" id="DescArmor" text="3 armors" textcolor="fff" textsize="3" textfont="RajdhaniMono"/>
	<label {{{LC}}} pos="-32 0" id="DescWeap" text="Nucleus" textcolor="fff" textsize="3" textfont="RajdhaniMono"/>
	<label {{{LC}}} pos="-32 -7.5" id="DescDesc" text="Reloads faster when hit by an enemy." textcolor="fff" textsize="1.75" textfont="RajdhaniMono"/>

	<quad {{{CC}}} size="95 30" bgcolor="000" opacity="0.75"/>
</frame>
	
<frame z-index="1000" pos="-45 -50" id="ToHide" scale="1.15">
<label {{{CC}}} pos="40 -15" textfont="Oswald" textprefix="$s" text="|FileBrowser|Select" translation="1"/>
<frame>
<quad id="Take0" pos="0 -2.5" {{{CC}}} size="15 20" bgcolor="ffffff00" bgcolorfocus="ffffff50" scriptevents="1" />
<quad {{{CC}}} size="15 15" image="https://cdn.discordapp.com/attachments/267654773786935307/559014926308343819/P_Susu.png"/>
<quad {{{CC}}} pos="0" size="15 15" bgcolor="200"/>
<quad {{{CC}}} pos="0 -10" size="15 5" bgcolor="100"/>
<label {{{CC}}} id="Label_Score1" size="12 9" pos="0 -9.5" z-index="1" text="JOLT" textfont="Oswald" textsize="2.5"/>
</frame>

<frame pos="16">
<quad id="Take1" pos="0 -2.5" {{{CC}}} size="15 20" bgcolor="ffffff00" bgcolorfocus="ffffff50" scriptevents="1" />
<quad {{{CC}}} size="15 15" image="https://cdn.discordapp.com/attachments/267654773786935307/559016940530696212/P_StormMan.png"/>
<quad {{{CC}}} pos="0" size="15 15" bgcolor="200"/>
<quad {{{CC}}} pos="0 -10" size="15 5" bgcolor="100"/>
<label {{{CC}}} id="Label_Score1" size="12 9" pos="0 -9.5" z-index="1" text="HAMMER" textfont="Oswald" textsize="2.5"/>
</frame>

<frame pos="32">
<quad id="Take2" pos="0 -2.5" {{{CC}}} size="15 20" bgcolor="ffffff00" bgcolorfocus="ffffff50" scriptevents="1" />
<quad {{{CC}}} size="15 15" image="https://cdn.discordapp.com/attachments/267654773786935307/559016942950809602/P_Blade.png"/>
<quad {{{CC}}} pos="0" size="15 15" bgcolor="002"/>
<quad {{{CC}}} pos="0 -10" size="15 5" bgcolor="001"/>
<label {{{CC}}} id="Label_Score1" size="12 9" pos="0 -9.5" z-index="1" text="BLADE" textfont="Oswald" textsize="2.5"/>
</frame>

<frame pos="48">
<quad id="Take3" pos="0 -2.5" {{{CC}}} size="15 20" bgcolor="ffffff00" bgcolorfocus="ffffff50" scriptevents="1" />
<quad {{{CC}}} size="15 15" image="https://cdn.discordapp.com/attachments/267654773786935307/559016942065942568/P_TronMan.png"/>
<quad {{{CC}}} pos="0" size="15 15" bgcolor="002"/>
<quad {{{CC}}} pos="0 -10" size="15 5" bgcolor="001"/>
<label {{{CC}}} id="Label_Score1" size="12 9" pos="0 -9.5" z-index="1" text="BLAST" textfont="Oswald" textsize="2.5"/>
</frame>

<frame pos="64">
<quad id="Take4" pos="0 -2.5" {{{CC}}} size="15 20" bgcolor="ffffff00" bgcolorfocus="ffffff50" scriptevents="1" />
<quad {{{CC}}} size="15 15" image="https://cdn.discordapp.com/attachments/267654773786935307/559016939674927187/P_Nail.png"/>
<quad {{{CC}}} pos="0" size="15 15" bgcolor="020"/>
<quad {{{CC}}} pos="0 -10" size="15 5" bgcolor="010"/>
<label {{{CC}}} id="Label_Score1" size="12 9" pos="0 -9.5" z-index="1" text="NAIL" textfont="Oswald" textsize="2.5"/>
</frame>

<frame pos="80">
<quad id="Take5" pos="0 -2.5" {{{CC}}} size="15 20" bgcolor="ffffff00" bgcolorfocus="ffffff50" scriptevents="1" />
<quad {{{CC}}} size="15 15" image="https://cdn.discordapp.com/attachments/267654773786935307/559016938442063892/P_Cell.png"/>
<quad {{{CC}}} pos="0" size="15 15" bgcolor="020"/>
<quad {{{CC}}} pos="0 -10" size="15 5" bgcolor="010"/>
<label {{{CC}}} id="Label_Score1" size="12 9" pos="0 -9.5" z-index="1" text="CELL" textfont="Oswald" textsize="2.5"/>
</frame>
</frame>

<script><!--
main()
{
	declare CMlQuad[] quads;
	for (I, 0, 6)
	{
		quads.add((Page.GetFirstChild("Take" ^ I) as CMlQuad));
	}

	declare frameToHide <=> (Page.GetFirstChild("ToHide") as CMlFrame);
	declare frameDescription <=> (Page.GetFirstChild("Description") as CMlFrame);
	
	declare descArmor <=> (Page.GetFirstChild("DescArmor") as CMlLabel);
	declare descWeap <=> (Page.GetFirstChild("DescWeap") as CMlLabel);
	declare descInfo <=> (Page.GetFirstChild("DescDesc") as CMlLabel);
	declare descType <=> (Page.GetFirstChild("DescType") as CMlLabel);
	
	frameDescription.Hide();
	
	declare LastTypeDescription = 0;

	while(True)
	{
		yield;
		
		if (InputPlayer == Null)
		{
			frameToHide.Hide();
			continue;
		}
		
		frameToHide.Visible = (InputPlayer.SpawnStatus == CSmPlayer::ESpawnStatus::NotSpawned)
												&& !InputPlayer.RequestsSpectate;
		
		foreach (event in PendingEvents)
		{
			if (event.Type == CMlScriptEvent::Type::MouseClick && (event.Control is CMlQuad))
			{
				declare netwrite WantThatKit for UI = 0;
				declare netwrite LastSpawnTick for UI = 0;
				
				WantThatKit = quads.keyof((event.Control as CMlQuad));
				LastSpawnTick = Now;
				
				SendCustomEvent("spawn_with_kit", [""]);
			}
			
			if (event.Type == CMlScriptEvent::Type::MouseOver)
			{
				frameDescription.Show();
				
				LastTypeDescription = quads.keyof((event.Control as CMlQuad));
				
				if (LastTypeDescription < 6)
					descType.Value = "SUPPORT ";
				if (LastTypeDescription < 4)
					descType.Value = "DAMAGE 🔥";
				if (LastTypeDescription < 2)
					descType.Value = "TANK ";
				
				if (LastTypeDescription == 0)
				{
					descArmor.Value = "3 armors";
					descWeap.Value = "Nucleus";
					descInfo.Value = "Reloads faster when hit by an enemy.\n-15% Speed";
				}
				if (LastTypeDescription == 1)
				{
					descArmor.Value = "4 armors";
					descWeap.Value = "Missiles";
					descInfo.Value = "Reload faster after not shooting for 4 seconds.\n-15% Speed";
				}
				if (LastTypeDescription == 2)
				{
					descArmor.Value = "2 armors";
					descWeap.Value = "Rockets";
					descInfo.Value = "+15% Speed";
				}
				if (LastTypeDescription == 3)
				{
					descArmor.Value = "2 armors";
					descWeap.Value = "Arrows";
					descInfo.Value = "No additional informations";
				}
				if (LastTypeDescription == 4)
				{
					descArmor.Value = "2 armors";
					descWeap.Value = "Laser";
					descInfo.Value = "No additional informations";
				}
				if (LastTypeDescription == 5)
				{
					descArmor.Value = "2 armors";
					descWeap.Value = "Rocket (Can Heal Allies)";
					descInfo.Value = "You are able to boost Jolt reload time.\n$zYou also heal yourself overtime.";
				}
			}
			
			if (event.Type == CMlScriptEvent::Type::MouseOut)
			{
				frameDescription.Hide();
			}
		}
	}
}
--></script>
</manialink>""";

	return txt;
}