//nogenerate

#Include "Libs/Nadeo/ShootMania/SM3.Script.txt" as SM3
#Include "Modes/ShootMania/Assault/generated/Components.Script.txt" as Components
#Include "Libs/ECS/EntityManager.Script.txt" as EntityManager
#Include "Modes/ShootMania/Assault/Constants.Script.txt" as AssaultConstants
#Include "MathLib" as ML
#Include "Libs/Nadeo/Layers2.Script.txt" as Layers

#Include "Modes/ShootMania/Assault/components/APlayer.Script.txt" as Lib_APlayer
#Include "Modes/ShootMania/Assault/components/ATeam.Script.txt" as Lib_ATeam
#Include "Modes/ShootMania/Assault/components/ALandmark.Script.txt" as Lib_ALandmark
#Include "Modes/ShootMania/Assault/components/ACurrentSpawn.Script.txt" as Lib_ACurrentSpawn
#Include "Modes/ShootMania/Assault/components/ARound.Script.txt" as Lib_ARound
#Include "Modes/ShootMania/Assault/components/AGameSettings.Script.txt" as Lib_AGameSettings

#Include "Modes/ShootMania/Assault/ELandmarkType.Script.txt" as ELandmarkType

#Struct Lib_APlayer::APlayer as APlayer
#Struct Lib_ATeam::ATeam as ATeam
#Struct Lib_ALandmark::ALandmark as ALandmark
#Struct Lib_ARound::ARound as ARound
#Struct Lib_AGameSettings::AGameSettings as AGameSettings
#Struct EntityManager::SEntity as SEntity

Void OnCapture(CSmModeEvent event)
{
	PassOn(event);
	
	declare AGameSettings gameSettings;
	foreach (Data in Components::GetAllData(AGameSettings {}))
	{
		gameSettings = Data._AGameSettings;
	}

	foreach (Data in Components::GetAllData(ALandmark {}))
	{
		if (Data._ALandmark.Value == event.Landmark.Id)
		{
			EndTime += gameSettings.CaptureGainTime * 1000;
			return;
		}
	}
}

Void Update()
{
	foreach (event in PendingEvents)
	{
		if (event.Type == CSmModeEvent::EType::OnCapture)
		{
			OnCapture(event);
		}
	}

	declare ARound round; declare SEntity roundEntity;
	declare AGameSettings gameSettings;
	
	foreach (Entity in Components::GetAllEntities(ARound {}))
	{
		roundEntity = Entity;
		round = Components::Get(Entity, ARound {});
	}

	foreach (Data in Components::GetAllData(AGameSettings {}))
	{
		gameSettings = Data._AGameSettings;
	}
	
	UIManager.UIAll.MarkersXML = "";

	declare captured = 0; declare total = 0;
	foreach (Data in Components::GetAllData(ALandmark {}))
	{
		if (Data._ALandmark.Type != ELandmarkType::ControlPoint)
			continue;
		
		if (Data._ALandmark.Index != round.CaptureIndex)
			continue;
			
		declare smLandmark <=> MapLandmarks[Data._ALandmark.Value];
		
		smLandmark.Gauge.Clan = round.AtkTeam;
		smLandmark.Base.Clan = 3 - round.AtkTeam;
		
		// get the icon, the code is ugly af right now
		declare icon = "A";
		if (smLandmark.Order == 2)
			icon = "B";
		if (smLandmark.Order == 3)
			icon = "C";
		
		UIManager.UIAll.MarkersXML ^= """<marker icon="Point{{{icon}}}" label="{{{ML::FloorInteger(smLandmark.Gauge.ValueReal * 100)}}}%" pos="{{{smLandmark.Position.X}}} {{{smLandmark.Position.Y + 5}}} {{{smLandmark.Position.Z}}}" />""";
		
		declare attackSpeed = 0;
		declare defCount = 0;
		foreach (playerId in smLandmark.Sector.PlayersIds)
		{
			declare player = Players[playerId];
			
			if (player.CurrentClan == round.AtkTeam)
			{
				attackSpeed += 1;
				
				if ((EndTime - Now) < 5900)
					EndTime = Now + 4800;
			}
			else	
				defCount += 1;
		}
		
		if (attackSpeed > 3)
			attackSpeed = 3;
		if (defCount > 0)
			attackSpeed = 0;
			
		smLandmark.Gauge.Speed = attackSpeed;
		smLandmark.Gauge.Max = gameSettings.TimeToCap * 1000;
		
		if (smLandmark.Gauge.Captured)
			captured += 1;
		
		total += 1;
	}
	
	if (total != 0 && captured == total)
	{
		round.CaptureIndex += 1;
		
		Components::Set(roundEntity, round);
	}
}

Text Layer_CaptureGauge()
{
	declare HVC = """ halign="center" valign="center" """;
	declare HVRB = """ halign="right" valign="bottom" """;
	declare HVLC = """ halign="left" valign="center" """;
	return """
	<frame id="mainFrame" posn="0 -34.5" scale="0.5">
		<label id="labelInformation" {{{HVC}}} posn="0 -8" textsize="3" scale="1.25" textprefix="$s" text="$sYou need to be two on the pole to capture it" style="TextButtonBig" />
		<label id="labelProgression" {{{HVRB}}} posn="45 2.5" textsize="14" text="$s$t100" style="TextButtonBig"  />
		<label id="labelModulo" {{{HVRB}}} posn="55 4" textsize="14" scale="0.625" text="$s%" style="TextButtonBig"  />
		<gauge id="captureGauge" {{{HVC}}} sizen="120 10" style="EnergyBar" drawbg="1" drawblockbg="1" />
	</frame>
	
	<script><!--
		#Include "MathLib" as MathLib
		#Include "TextLib" as TextLib
	
		***Start***
		***
			declare MainFrame = cast(CMlFrame, Page.GetFirstChild("mainFrame"));
			declare CaptureGauge = cast(CMlGauge, Page.GetFirstChild("captureGauge"));
			declare LabelProgression = cast(CMlLabel, Page.GetFirstChild("labelProgression"));
			declare LabelModulo = cast(CMlLabel, Page.GetFirstChild("labelModulo"));
			declare LabelInfo = cast(CMlLabel, Page.GetFirstChild("labelInformation"));
		***
	
		***Update***
		***
			if (GUIPlayer != Null)
			{
				if (GUIPlayer.CapturedLandmark != Null && GUIPlayer.CapturedLandmark.Base != Null)
				{
					declare landmark <=> GUIPlayer.CapturedLandmark;
					declare CaptureClan = 3 - landmark.Base.Clan;
					
					CaptureGauge.SetRatio(Lerp(CaptureGauge.Ratio, landmark.Gauge.ValueReal, 0.25));
					CaptureGauge.Clan = landmark.Gauge.Clan;
					
					if (landmark.Gauge.Speed < 0)
					{
						LabelModulo.SetText("$ss");
						
						declare value = "" ^ ((landmark.Gauge.Value/landmark.Gauge.Speed)/-1000) + 1;
						LabelProgression.SetText("$s" ^ TextLib::SubText(value, 0, 2));
					}
					else
					{
						LabelModulo.SetText("$s%");
						LabelProgression.SetText("$s" ^ MathLib::NearestInteger(landmark.Gauge.ValueReal*100));
					}			
					
					if (CaptureClan != GUIPlayer.CurrentClan)
					{
						if (landmark.Gauge.Captured)
							LabelInfo.SetText("This pole is already captured. Capture the others.");
						else
							LabelInfo.SetText("DEFEND");
					}
					else
					{
						if (landmark.Gauge.Captured)
							LabelInfo.SetText("This pole is already captured. Defend the others.");
						else
						{
						
							declare atkTeamNb = 0;
							declare defTeamNb = 0;
							foreach (playerID in landmark.Sector.PlayersIds)
							{
								declare player <=> Players[playerID];
								if (player.CurrentClan == CaptureClan)
								{							
									atkTeamNb += 1;
								}
								else
								{
									defTeamNb += 1;
								}
							}
							
							if (defTeamNb > 0) LabelInfo.SetText("CONTESTED");
							else LabelInfo.SetText("CAPTURING THE POLE");
						}
					}	
					
					MainFrame.Show();
				}
				else MainFrame.Hide();
			}
			else MainFrame.Hide();
		***
		
		Real Lerp(Real a, Real b, Real t)
		{
			return a * (1 - t) + b * t;
		}
	
		main()
		{
			+++Start+++
			while(True)
			{
				+++Update+++
				yield;
			}
		}
	--></script>
	""";
}

Void Create()
{
	Layers::Create("Layer_CaptureGauge", Layer_CaptureGauge());
}

Void Yield()
{
	Layers::Attach("Layer_CaptureGauge");
}